{
  "version": 3,
  "sources": ["../../../../src/wrapper/server/Entity/index.ts"],
  "sourcesContent": ["import * as Minecraft from \"@minecraft/server\";\r\nimport { EntityComponents } from \"../../Types/EntityComponents\";\r\n\r\ntype DynamicPropertyReturns = boolean | number | string | undefined;\r\ntype DynamicPropertySetter = boolean | number | string;\r\n\r\nexport class NewEntity {\r\n    private entity: Minecraft.Entity;\r\n\r\n    constructor(copyFrom: Minecraft.Entity) {\r\n        this.entity = copyFrom;\r\n    }\r\n\r\n    getDimension(): Minecraft.Dimension {\r\n        return this.entity.dimension;\r\n    }\r\n\r\n    getId(): string {\r\n        return this.entity.id;\r\n    }\r\n\r\n    getTypeId(): string {\r\n        return this.entity.typeId;\r\n    }\r\n\r\n    isEntity(): this is NewEntity {\r\n        return this instanceof NewEntity; \r\n    }\r\n\r\n    addEffect(effectType: string | Minecraft.EffectType, duration: number, options?: Minecraft.EntityEffectOptions | undefined): boolean {\r\n        return this.entity.addEffect(effectType, duration, options);\r\n    }\r\n\r\n    addTag(tag: string): boolean {\r\n        return this.entity.addTag(tag);\r\n    }\r\n\r\n    addTags(tags: string[]): boolean[] {\r\n        return tags.map((tag) => this.entity.addTag(tag));\r\n    }\r\n\r\n    removeTag(tag: string): boolean {\r\n        return this.entity.removeTag(tag);\r\n    }\r\n\r\n    removeTags(tags: string[]): boolean[] {\r\n        return tags.map((tag) => this.entity.removeTag(tag));\r\n    }\r\n\r\n    getTags(): string[] {\r\n        return this.entity.getTags();\r\n    }\r\n\r\n    applyDamage(amount: number, options?: Minecraft.EntityApplyDamageByProjectileOptions | Minecraft.EntityApplyDamageOptions | undefined): boolean {\r\n        return this.applyDamage(amount, options);\r\n    }\r\n\r\n    applyImpulse(vector: Minecraft.Vector3): void {\r\n        this.applyImpulse(vector);\r\n    }\r\n\r\n    applyKnockback(directionX: number, directionZ: number, horizontalStrength: number, verticalStrength: number): void {\r\n        this.applyKnockback(directionX, directionZ, horizontalStrength, verticalStrength);\r\n    }\r\n\r\n    clearVelocity(): void {\r\n        this.clearVelocity();\r\n    }\r\n\r\n    extinguishFire(useEffects?: boolean | undefined): boolean {\r\n        return this.entity.extinguishFire(useEffects);\r\n    }\r\n\r\n    getBlockFromViewDirection(options?: Minecraft.BlockRaycastOptions | undefined): Minecraft.Block {\r\n        return this.entity.getBlockFromViewDirection(options);\r\n    }\r\n\r\n    getComponent<C extends keyof EntityComponents>(componentId: C): EntityComponents[C] | undefined {\r\n        return this.entity.getComponent(componentId) as any;\r\n    }\r\n\r\n    getComponents(): Minecraft.EntityComponent[] {\r\n        return this.entity.getComponents();\r\n    }\r\n\r\n    getDynamicProperty(identifier: string): string | number | boolean | undefined {\r\n        return this.entity.getDynamicProperty(identifier);\r\n    }\r\n\r\n    getEffect(effectType: string | Minecraft.EffectType): Minecraft.Effect | undefined {\r\n        return this.entity.getEffect(effectType);\r\n    }\r\n\r\n    getEffects(): Minecraft.Effect[] {\r\n        return this.entity.getEffects();\r\n    }\r\n\r\n    getEntitiesFromViewDirection(options?: Minecraft.EntityRaycastOptions | undefined): Minecraft.Entity[] {\r\n        return this.entity.getEntitiesFromViewDirection(options);\r\n    }\r\n\r\n    getHeadLocation(): Minecraft.Vector3 {\r\n        return this.entity.getHeadLocation();\r\n    }\r\n\r\n    getRotation(): Minecraft.Vector2 {\r\n        return this.entity.getRotation();\r\n    }\r\n\r\n    getVelocity(): Minecraft.Vector3 {\r\n        return this.entity.getVelocity();\r\n    }\r\n\r\n    getViewDirection(): Minecraft.Vector3 {\r\n        return this.entity.getViewDirection();\r\n    }\r\n\r\n    hasComponent(componentId: keyof EntityComponents): boolean {\r\n        return this.entity.hasComponent(componentId as any);\r\n    }\r\n\r\n    hasTag(tag: string): boolean {\r\n        return this.entity.hasTag(tag);\r\n    }\r\n\r\n    kill(): boolean {\r\n        return this.entity.kill();\r\n    }\r\n\r\n    playAnimation(animationName: string, options?: Minecraft.PlayAnimationOptions): void {\r\n        return this.entity.playAnimation(animationName, options);\r\n    }\r\n\r\n    removeDynamicProperty(identifier: string): boolean {\r\n        return this.entity.removeDynamicProperty(identifier);\r\n    }\r\n\r\n    removeEffect(effectType: string | Minecraft.EffectType): boolean {\r\n        return this.entity.removeEffect(effectType);\r\n    }\r\n\r\n    runCommand(commandString: string): Minecraft.CommandResult {\r\n        return this.entity.runCommand(commandString);\r\n    }\r\n\r\n    runCommandAsync(commandString: string): Promise<Minecraft.CommandResult> {\r\n        return this.entity.runCommandAsync(commandString);\r\n    }\r\n\r\n    setDynamicProperty(identifier: string, value: string | number | boolean): void {\r\n        return this.entity.setDynamicProperty(identifier, value);\r\n    }\r\n\r\n    setOnFire(seconds: number, useEffects?: boolean): boolean {\r\n        return this.entity.setOnFire(seconds, useEffects);\r\n    }\r\n\r\n    setRotation(rotation: Minecraft.Vector2): void {\r\n        this.entity.setRotation(rotation);\r\n    }\r\n\r\n    teleport(location: Minecraft.Vector3, teleportOptions?: Minecraft.TeleportOptions | undefined): void {\r\n        this.entity.teleport(location, teleportOptions);\r\n    }\r\n\r\n    tryTeleport(location: Minecraft.Vector3, teleportOptions?: Minecraft.TeleportOptions | undefined): boolean {\r\n        return this.entity.tryTeleport(location, teleportOptions);\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["copyFrom", "effectType", "duration", "options", "tag", "tags", "amount", "vector", "directionX", "directionZ", "horizontalStrength", "verticalStrength", "useEffects", "componentId", "identifier", "animationName", "commandString", "value", "seconds", "rotation", "location", "teleportOptions"]
}
