{
  "version": 3,
  "sources": ["../../../../src/wrapper/server/Player/index.ts"],
  "sourcesContent": ["import * as Minecraft from \"@minecraft/server\";\r\nimport NewEntity from \"../Entity/index\";\r\nimport { world } from \"../index\";\r\nimport { DimensionSelector } from \"../../Types/index\";\r\n\r\nexport default class NewPlayer extends NewEntity {\r\n    private player: Minecraft.Player;\r\n    \r\n    constructor(copyFrom: Minecraft.Player) {\r\n        super(copyFrom)\r\n        this.player = copyFrom;\r\n    }\r\n\r\n    get name(): string {\r\n        return this.player.name;\r\n    }\r\n\r\n    get nameTag(): string {\r\n        return this.player.nameTag;\r\n    }\r\n\r\n    setNameTag(nameTag: string): void {\r\n        this.player.nameTag = nameTag;\r\n    }\r\n\r\n    kick(reason: string): boolean {\r\n        return this.player.runCommand(`kick \"${this.player.name}\" ${reason}`) ? true : false;\r\n    }\r\n\r\n    kickAsync(reason: string): Promise<boolean|any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.player.runCommandAsync(`kick \"${this.player.name}\" ${reason}`)\r\n            .then(() => resolve(true))\r\n            .catch((e) => reject(e));\r\n        })\r\n    }\r\n\r\n    getInventory() {\r\n        return this.getComponent(\"inventory\");\r\n    }\r\n\r\n    getSelectedSlot(): number {\r\n        return this.player.selectedSlot;\r\n    }\r\n\r\n    setSelectedSlot(slot: number): void {\r\n        this.player.selectedSlot = slot;\r\n    }\r\n\r\n    getTotalXpNeededForNextLevel(): number {\r\n        return this.player.totalXpNeededForNextLevel;\r\n    }\r\n\r\n    getXpEarnedAtCurrentLevel(): number {\r\n        return this.player.xpEarnedAtCurrentLevel;\r\n    }\r\n\r\n    addExperience(amount: number): number {\r\n        return this.player.addExperience(amount);\r\n    }\r\n\r\n    addLevels(amount: number): number {\r\n        return this.player.addLevels(amount);\r\n    }\r\n\r\n    getItemCooldown(itemCategory: string): number {\r\n        return this.player.getItemCooldown(itemCategory);\r\n    }\r\n\r\n    getSpawnPoint(): Minecraft.Vector3 | undefined {\r\n        return this.player.getSpawnPosition();\r\n    }\r\n\r\n    setSpawnPoint(spawnPoint: Minecraft.Vector3, dimensionId: DimensionSelector): void {\r\n        const dimension = world.getDimension(dimensionId);\r\n\r\n        this.player.setSpawn(spawnPoint, dimension);\r\n    }\r\n\r\n    getTotalXp(): number {\r\n        return this.player.getTotalXp();\r\n    }\r\n\r\n    isOperator(): boolean {\r\n        return this.player.isOp();\r\n    }\r\n\r\n    setOperator(status: boolean): void {\r\n        this.player.setOp(status);\r\n    }\r\n\r\n    playSound(soundID: string, soundOptions?: Minecraft.PlayerSoundOptions): void {\r\n        this.player.playSound(soundID, soundOptions);\r\n    }\r\n\r\n    postClientMessage(id: string, value: string): void {\r\n        this.player.postClientMessage(id, value);\r\n    }\r\n\r\n    resetLevel(): void {\r\n        this.player.resetLevel();\r\n    }\r\n\r\n    sendMessage(message: (Minecraft.RawMessage | string)[] | Minecraft.RawMessage | string): void {\r\n        this.player.sendMessage(message);\r\n    }\r\n\r\n    startItemCooldown(itemCategory: string, tickDuration: number): void {\r\n        this.player.startItemCooldown(itemCategory, tickDuration);\r\n    }\r\n\r\n    // copyFrom\u304C\u914D\u5217\u306E\u5834\u5408\u3001\u914D\u5217\u3067\u8FD4\u3059\u3002\u914D\u5217\u3067\u306F\u306A\u3044\u5834\u5408\u3001\u5358\u4F53\u3067\u8FD4\u3059\u3002\r\n    static convertToNewPlayer<T extends Minecraft.Player | Array<Minecraft.Player>>(copyFrom: T): T extends Array<Minecraft.Player> ? NewPlayer[] : NewPlayer {\r\n        if(copyFrom instanceof Array) {\r\n            return copyFrom.map((v) => new NewPlayer(v)) as any;\r\n        } else {\r\n            return new NewPlayer(copyFrom) as any;\r\n        }\r\n    }\r\n}"],
  "mappings": "AACA,OAAO,eAAe;AACtB,SAAS,aAAa;AAGtB,qBAAqB,kBAAkB,UAAU;AAAA,EAG7C,YAAY,UAA4B;AACpC,UAAM,QAAQ;AACd,SAAK,SAAS;AAAA,EAClB;AAAA,EAEA,IAAI,OAAe;AACf,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAEA,IAAI,UAAkB;AAClB,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAEA,WAAW,SAAuB;AAC9B,SAAK,OAAO,UAAU;AAAA,EAC1B;AAAA,EAEA,KAAK,QAAyB;AAC1B,WAAO,KAAK,OAAO,WAAW,SAAS,KAAK,OAAO,SAAS,QAAQ,IAAI,OAAO;AAAA,EACnF;AAAA,EAEA,UAAU,QAAsC;AAC5C,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,WAAK,OAAO,gBAAgB,SAAS,KAAK,OAAO,SAAS,QAAQ,EACjE,KAAK,MAAM,QAAQ,IAAI,CAAC,EACxB,MAAM,CAAC,MAAM,OAAO,CAAC,CAAC;AAAA,IAC3B,CAAC;AAAA,EACL;AAAA,EAEA,eAAe;AACX,WAAO,KAAK,aAAa,WAAW;AAAA,EACxC;AAAA,EAEA,kBAA0B;AACtB,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAEA,gBAAgB,MAAoB;AAChC,SAAK,OAAO,eAAe;AAAA,EAC/B;AAAA,EAEA,+BAAuC;AACnC,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAEA,4BAAoC;AAChC,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAEA,cAAc,QAAwB;AAClC,WAAO,KAAK,OAAO,cAAc,MAAM;AAAA,EAC3C;AAAA,EAEA,UAAU,QAAwB;AAC9B,WAAO,KAAK,OAAO,UAAU,MAAM;AAAA,EACvC;AAAA,EAEA,gBAAgB,cAA8B;AAC1C,WAAO,KAAK,OAAO,gBAAgB,YAAY;AAAA,EACnD;AAAA,EAEA,gBAA+C;AAC3C,WAAO,KAAK,OAAO,iBAAiB;AAAA,EACxC;AAAA,EAEA,cAAc,YAA+B,aAAsC;AAC/E,UAAM,YAAY,MAAM,aAAa,WAAW;AAEhD,SAAK,OAAO,SAAS,YAAY,SAAS;AAAA,EAC9C;AAAA,EAEA,aAAqB;AACjB,WAAO,KAAK,OAAO,WAAW;AAAA,EAClC;AAAA,EAEA,aAAsB;AAClB,WAAO,KAAK,OAAO,KAAK;AAAA,EAC5B;AAAA,EAEA,YAAY,QAAuB;AAC/B,SAAK,OAAO,MAAM,MAAM;AAAA,EAC5B;AAAA,EAEA,UAAU,SAAiB,cAAmD;AAC1E,SAAK,OAAO,UAAU,SAAS,YAAY;AAAA,EAC/C;AAAA,EAEA,kBAAkB,IAAY,OAAqB;AAC/C,SAAK,OAAO,kBAAkB,IAAI,KAAK;AAAA,EAC3C;AAAA,EAEA,aAAmB;AACf,SAAK,OAAO,WAAW;AAAA,EAC3B;AAAA,EAEA,YAAY,SAAkF;AAC1F,SAAK,OAAO,YAAY,OAAO;AAAA,EACnC;AAAA,EAEA,kBAAkB,cAAsB,cAA4B;AAChE,SAAK,OAAO,kBAAkB,cAAc,YAAY;AAAA,EAC5D;AAAA,EAGA,OAAO,mBAAyE,UAA0E;AACtJ,QAAG,oBAAoB,OAAO;AAC1B,aAAO,SAAS,IAAI,CAAC,MAAM,IAAI,UAAU,CAAC,CAAC;AAAA,IAC/C,OAAO;AACH,aAAO,IAAI,UAAU,QAAQ;AAAA,IACjC;AAAA,EACJ;AACJ;",
  "names": []
}
