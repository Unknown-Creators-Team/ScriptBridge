{
  "version": 3,
  "sources": ["../../../../../src/wrapper/server/World/AfterEvents/blockBreak.ts"],
  "sourcesContent": ["import * as Minecraft from \"@minecraft/server\";\r\nimport NewPlayer from \"../../Player/index\";\r\n\r\ntype Callback = (event: NewBlockBreak) => void;\r\n\r\nexport default class NewBlockBreak {\r\n    private static callbackList: Map<string, Callback> = new Map();\r\n    private event: Minecraft.BlockBreakAfterEvent;\r\n\r\n    constructor(copyFrom: Minecraft.BlockBreakAfterEvent) {\r\n        this.event = copyFrom;\r\n    }\r\n\r\n    get block(): Minecraft.Block {\r\n        return this.event.block;\r\n    }\r\n\r\n    get player(): NewPlayer {\r\n        return NewPlayer.convertToNewPlayer(this.event.player);\r\n    }\r\n\r\n    get dimension(): Minecraft.Dimension {\r\n        return this.event.dimension;\r\n    }\r\n\r\n    get brokenBlockPermutation(): Minecraft.BlockPermutation {\r\n        return this.event.brokenBlockPermutation;\r\n    }\r\n\r\n    getHandItem(): Minecraft.ItemStack {\r\n        return this.player.getInventory().container.getItem(this.player.getSelectedSlot());\r\n    }\r\n\r\n    // // // // // // // // // // // // // // // \r\n\r\n    static call(event: Minecraft.BlockBreakAfterEvent) {\r\n        NewBlockBreak.callbackList.forEach((callback) => {\r\n            callback(new this(event));\r\n        });\r\n    }\r\n\r\n    static subscribe(id: string, callback: Callback) {\r\n        NewBlockBreak.callbackList.set(id, callback);\r\n\r\n        return id;\r\n    }\r\n\r\n    static unsubscribe(id: string) {\r\n        return NewBlockBreak.callbackList.delete(id);\r\n    }\r\n}"],
  "mappings": "AACA,OAAO,eAAe;AAItB,MAAqB,iBAArB,MAAmC;AAAA,EAI/B,YAAY,UAA0C;AAClD,SAAK,QAAQ;AAAA,EACjB;AAAA,EAEA,IAAI,QAAyB;AACzB,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EAEA,IAAI,SAAoB;AACpB,WAAO,UAAU,mBAAmB,KAAK,MAAM,MAAM;AAAA,EACzD;AAAA,EAEA,IAAI,YAAiC;AACjC,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EAEA,IAAI,yBAAqD;AACrD,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EAEA,cAAmC;AAC/B,WAAO,KAAK,OAAO,aAAa,EAAE,UAAU,QAAQ,KAAK,OAAO,gBAAgB,CAAC;AAAA,EACrF;AAAA,EAIA,OAAO,KAAK,OAAuC;AAC/C,mBAAc,aAAa,QAAQ,CAAC,aAAa;AAC7C,eAAS,IAAI,KAAK,KAAK,CAAC;AAAA,IAC5B,CAAC;AAAA,EACL;AAAA,EAEA,OAAO,UAAU,IAAY,UAAoB;AAC7C,mBAAc,aAAa,IAAI,IAAI,QAAQ;AAE3C,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,YAAY,IAAY;AAC3B,WAAO,eAAc,aAAa,OAAO,EAAE;AAAA,EAC/C;AACJ;AA7CA,IAAqB,gBAArB;AAAqB,cACF,eAAsC,oBAAI,IAAI;AADjE;AAAA,EAAO,iBALP;AAAA;",
  "names": []
}
